/*
1037. 在霍格沃茨找零钱（20）

如果你是哈利・波特迷，你会知道魔法世界有它自己的货币系统 ―― 就如海格告诉哈利的：
“十七个银西可(Sickle)兑一个加隆(Galleon)，二十九个纳特(Knut)兑一个西可，很容易。”
现在，给定哈利应付的价钱P和他实付的钱A，你的任务是写一个程序来计算他应该被找的零钱。
输入格式：
输入在1行中分别给出P和A，格式为“Galleon.Sickle.Knut”，其间用1个空格分隔。这里Galleon是[0, 107]区间内的整数，Sickle是[0, 17)区间内的整数，Knut是[0, 29)区间内的整数。
输出格式：
在一行中用与输入同样的格式输出哈利应该被找的零钱。如果他没带够钱，那么输出的应该是负数。
输入样例1：
10.16.27 14.1.28
输出样例1：
3.2.1
输入样例2：
14.1.28 10.16.27
输出样例2：
-3.2.1
*/


#include <iostream>

using namespace std;

int main()
{
	int P[3], A[3];
	int p, a;
	scanf("%d.%d.%d", &P[0], &P[1], &P[2]);
	scanf("%d.%d.%d", &A[0], &A[1], &A[2]);

	p = P[0] * 17 * 29 + P[1] * 29 + P[2];
	a = A[0] * 17 * 29 + A[1] * 29 + A[2];

	int R[3];
	int r;
	r = a-p;
	bool flag;
	if (r >= 0)
		flag = true;
	else
	{
		flag = false;
		r = -r;
	}
	R[2] = r % 29;
	r /= 29;
	R[1] = r % 17;
	R[0] = r / 17;

	if (flag)
		cout << R[0] << "." << R[1] << "." << R[2] << endl;
	else
		cout <<"-"<< R[0] << "." << R[1] << "." << R[2] << endl;

	return 0;
}